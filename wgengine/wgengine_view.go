// Copyright (c) Tailscale Inc & AUTHORS
// SPDX-License-Identifier: BSD-3-Clause

// Code generated by tailscale/cmd/viewer; DO NOT EDIT.

package wgengine

import (
	"encoding/json"
	"errors"

	"github.com/tailscale/wireguard-go/tun"
	"tailscale.com/control/controlknobs"
	"tailscale.com/net/dns"
	"tailscale.com/net/netmon"
	"tailscale.com/net/tsdial"
	"tailscale.com/tailfs"
	"tailscale.com/wgengine/router"
)

//go:generate go run tailscale.com/cmd/cloner  -clonefunc=false -type=Config

// View returns a readonly view of Config.
func (p *Config) View() ConfigView {
	return ConfigView{ж: p}
}

// ConfigView provides a read-only view over Config.
//
// Its methods should only be called if `Valid()` returns true.
type ConfigView struct {
	// ж is the underlying mutable value, named with a hard-to-type
	// character that looks pointy like a pointer.
	// It is named distinctively to make you think of how dangerous it is to escape
	// to callers. You must not let callers be able to mutate it.
	ж *Config
}

// Valid reports whether underlying value is non-nil.
func (v ConfigView) Valid() bool { return v.ж != nil }

// AsStruct returns a clone of the underlying value which aliases no memory with
// the original.
func (v ConfigView) AsStruct() *Config {
	if v.ж == nil {
		return nil
	}
	return v.ж.Clone()
}

func (v ConfigView) MarshalJSON() ([]byte, error) { return json.Marshal(v.ж) }

func (v *ConfigView) UnmarshalJSON(b []byte) error {
	if v.ж != nil {
		return errors.New("already initialized")
	}
	if len(b) == 0 {
		return nil
	}
	var x Config
	if err := json.Unmarshal(b, &x); err != nil {
		return err
	}
	v.ж = &x
	return nil
}

func (v ConfigView) Tun()                                 { panic("unsupported") }
func (v ConfigView) IsTAP() bool                          { return v.ж.IsTAP }
func (v ConfigView) Router() bool                         { panic("unsupported") }
func (v ConfigView) DNS() bool                            { panic("unsupported") }
func (v ConfigView) NetMon() netmon.MonitorView           { return v.ж.NetMon.View() }
func (v ConfigView) Dialer() tsdial.DialerView            { return v.ж.Dialer.View() }
func (v ConfigView) ControlKnobs() controlknobs.KnobsView { return v.ж.ControlKnobs.View() }
func (v ConfigView) ListenPort() uint16                   { return v.ж.ListenPort }
func (v ConfigView) RespondToPing() bool                  { return v.ж.RespondToPing }
func (v ConfigView) BIRDClient() bool                     { panic("unsupported") }
func (v ConfigView) SetSubsystem() func(any)              { return v.ж.SetSubsystem }
func (v ConfigView) TailFSForLocal() func(any)            { panic("unsupported") }

// A compilation failure here means this code must be regenerated, with the command at the top of this file.
var _ConfigViewNeedsRegeneration = Config(struct {
	Tun            tun.Device
	IsTAP          bool
	Router         router.Router
	DNS            dns.OSConfigurator
	NetMon         *netmon.Monitor
	Dialer         *tsdial.Dialer
	ControlKnobs   *controlknobs.Knobs
	ListenPort     uint16
	RespondToPing  bool
	BIRDClient     BIRDClient
	SetSubsystem   func(any)
	TailFSForLocal tailfs.FileSystemForLocal
}{})
